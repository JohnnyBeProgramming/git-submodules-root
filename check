#!/usr/bin/env bash
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

THIS_DIR=`dirname $0`

# -----------------------------------------------------------------------------
# Declare functions
# -----------------------------------------------------------------------------

function display_help() {
    echo "Usage: ${0} [ Options ] [ <target_dir> ]"
    echo ""
    echo "Where:"
    echo "  <target_dir>	The folder that you want to check (default is root)'"
    echo ""
	echo "Options:"
	echo "  -h          	Display this help section."
	echo "  -x   			Check online for updates (does a git fetch origin)."
	echo ""
}

function parse_args() {
    local OPTIND=1
    while getopts ":hx" opt; do
    case $opt in
      h)
        display_help
        exit 1
        ;;
      x)
        CHECK_ONLINE=Y
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
    done
    shift $((OPTIND - 1))

	# Include the library of common functions
	THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

    # Define the defaults for all variables
    TARGET_FOLDER=${1:-$THIS_DIR}
    CHECK_ONLINE=${CHECK_ONLINE:-N}

}

function run() {
    parse_args "$@"
    define_colors

	echo "-------------------------------------------------------------------------------"
	echo "Checking status of '${BRIGHT}${MAGENTA}${TARGET_FOLDER}${NORMAL}'..."
	echo "-------------------------------------------------------------------------------"

	git_check_recursive "${TARGET_FOLDER}"

	echo "-------------------------------------------------------------------------------"
}

function git_has_changes () {
    git rev-parse --verify HEAD >/dev/null || exit 1
    git update-index -q --ignore-submodules --refresh
    err=0
    if git diff-files --quiet --ignore-submodules
    then
        err=1
    fi
    return $err
}

function git_has_commits () {
    err=0
    if git diff-index --cached --quiet --ignore-submodules HEAD --
    then
        err=1
    fi
    return $err
}

function git_check_status() {
	local space=${1:-}
	local path=${PWD##*/}
	local branch=
	local comment=

	if [ -d ".git" ] || [ -f ".git" ]
	then
		branch=`git rev-parse --abbrev-ref HEAD`
		comment=`git log --oneline -1`

		if git_has_changes; then
			path="${BRIGHT}${YELLOW}${path}${NORMAL}"
			branch="${BRIGHT}${RED}${branch}${NORMAL}"
			comment="${YELLOW}You have un-tracked changes...${NORMAL}"
		elif git_has_commits; then
			path="${BRIGHT}${YELLOW}${path}${NORMAL}"
			branch="${BRIGHT}${YELLOW}${branch}${NORMAL}"
			comment="${YELLOW}You have changes ready to commit...${NORMAL}"
		else

			if [ "${CHECK_ONLINE}" == "Y" ]
			then
				git fetch origin --quiet &> /dev/null
			fi

			LOCAL=$(git rev-parse @ 2> /dev/null)
			REMOTE=$(git rev-parse @{u} 2> /dev/null)
			BASE=$(git merge-base @ @{u} 2> /dev/null)

			if [ "${LOCAL}" == "${REMOTE}" ]; then
				# Up-to-date
				path="${BRIGHT}${BLUE}${path}${NORMAL}"
				branch="${BRIGHT}${POWDER_BLUE}${branch}${NORMAL}"
			elif [ "${LOCAL}" == "${BASE}" ]; then
				# Need to pull
				path="${BRIGHT}${MAGENTA}${path}${NORMAL}"
				branch="${MAGENTA}${branch}${NORMAL}"
				comment="Updates available ${REMOTE}."
			elif [ "${REMOTE}" == "${BASE}" ]; then
				# Need to push
				path="${BRIGHT}${MAGENTA}${path}${NORMAL}"
				branch="${BRIGHT}${MAGENTA}${branch}${NORMAL}"
				comment="${YELLOW}There are commits that has not been pushed.${NORMAL}"
			else
				# Diverged
				path="${BRIGHT}${RED}${path}${NORMAL}"
				branch="${BRIGHT}${RED}${branch}${NORMAL}"
				comment="Diverged from remote sources."
			fi
		fi

		branch="[ ${UNDERLINE}${branch}${NORMAL} ]"
	else
		path="${WHITE}${PWD##*/}${NORMAL}"
	fi

	# set colors

	comment="${GRAY}${comment}${NORMAL}"

	echo "${space} + ${path} ${branch} ${comment}"
}

function git_check_recursive() {
	local path=${1:-.}
	local space=${2:-}

	pushd "${path}" > /dev/null
	git_check_status "${space}" || echo "Error: ${path}"
	for item in `find . -type d -mindepth 1 -maxdepth 2 -not -path '*/\.*'`
	do
		if [ -d "${item}/.git" ] || [ -f "${item}/.git" ];
		then
			git_check_recursive "${item}" "  ${space}" || echo "Error: ${path}"
		fi
	done
	popd > /dev/null
}

function define_colors() {
	# Check if we should disable terminal colors (relevant for build servers and dumb terminals)
	HAS_COLOR=${HAS_COLOR:-Y}
	if [ "${TERM:-}" == "" ] || [ "${TERM:-}" == "dumb" ]
	then
		HAS_COLOR=
	fi

    if test -t 1; then
        BLACK=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 0)
        RED=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 1)
        GREEN=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 2)
        YELLOW=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 3)
        LIME_YELLOW=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 190)
        POWDER_BLUE=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 153)
        BLUE=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 4)
        MAGENTA=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 5)
        CYAN=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 6)
        WHITE=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 7)
        GRAY=$([ ! "${HAS_COLOR}" == "Y" ] || tput setaf 8)
        BRIGHT=$([ ! "${HAS_COLOR}" == "Y" ] || tput bold)
        NORMAL=$([ ! "${HAS_COLOR}" == "Y" ] || tput sgr0)
        REVERSE=$([ ! "${HAS_COLOR}" == "Y" ] || tput smso)
        UNDERLINE=$([ ! "${HAS_COLOR}" == "Y" ] || tput smul)
    else
        BLACK=""
        RED=""
        GREEN=""
        YELLOW=""
        LIME_YELLOW=""
        POWDER_BLUE=""
        BLUE=""
        MAGENTA=""
        CYAN=""
        WHITE=""
        GRAY=""
        BRIGHT=""
        NORMAL=""
        REVERSE=""
        UNDERLINE=""
    fi
}

# ---------------------------------------------------------------------
# Bootstrap the script
# ---------------------------------------------------------------------
run "$@"